Data Types:

EntityType:
path: data/config/entities/typename.xml (list of ids in data/config/entities.xml, dynamically changed)
example: as originals

EffectType:
path: data/config/effects/typename.xml (usually data/config/effects.xml, dynamically changed)
example:
<?xml version="1.0" encoding="utf-8" ?>
<root>
	<Logic classname="GGL::CArrowEffectProps">
		<Class>GGL::CArrowEffect</Class>
		<Global>false</Global>
		<Duration>0</Duration>
		<Speed>1200.0</Speed>
		<GravityFactor>600.0f</GravityFactor>
		<HeightOffsetStart>160.0</HeightOffsetStart>
		<HeightOffsetTarget>120.0</HeightOffsetTarget>
		<Damage>0</Damage>
	</Logic>
	<Display classname="ED::CFlyingEffectProps">
		<Class>ED::CFlyingEffect</Class>
		<Model>XD_CannonBall</Model>
	</Display>
</root>

TaskList:
path: data/config/tasklists/tlname.xml (list of ids in data/config/tllist.xml, dynamically changed)
example: as originals

Technology:
path: data/config/technologies/tname.xml, (list of ids in data/config/technologies.xml, dynamically changed)
example: as originals

Model:
path: data/config/models/mname.xml and data/graphics/models/mname.dff (as well as referenced textures),
		(usually data/config/models.xml", dynamically changed)
example xml (see ED::CModelsProps::ModelData for full list of entries):
<?xml version="1.0" encoding="utf-8" ?>
<root>
	<SelectionTexture>Selection_Building</SelectionTexture>
	<CastShadow>false</CastShadow>
</root>
example dff: as originals (note: hard to save/load, best possibility is a GTA blender tool)
Note: remember to load SelectionTexture as Selection Texture, if you are not using a vanilla texture.

Model Texture:
path: data/graphics/textures/tname.dds, data/graphics/textureslow/tname.dds and data/graphics/texturesmed/tname.dds
example: as originals (there is a git plugin to edit them, but you might want to edit them alongside models)
Note: cannot be loaded directly, gets loaded via the referencing model.

Selection Texture:
path: data/graphics/textures/tname.dds, data/graphics/textureslow/tname.dds and data/graphics/texturesmed/tname.dds
example: as originals (there is a git plugin to edit them)
Note: selection textures are referenced by the additional model data. they could get loaded without specifically loading them via modloader, but in that case, they will not get cleaned up properly.
Note2: water/shorewave.dds can also be modified with the same functions (but i did not test, if this actually does something).

Terrain Texture:
path: data/graphics/textures/tname.dds, data/graphics/textureslow/tname.dds and data/graphics/texturesmed/tname.dds
example: as originals (there is a git plugin to edit them)
Note: Terran Textures are referenced in TerrainTypes and WaterTypes (Ice Textures). They should get loaded without specifically loading them via modloader, but in that case, they will not get cleaned up properly.

GUITexture:
path: data/graphics/textures/gui/tname.png (full path as id used)
example: as originals
Note: GUI textures are used only for widgets. referenced by the gui xml and loaded from there without specifically loading them via modloader, but in that case, they will not get cleaned up properly.
Note2: The full path to the texture is used as id, and having data in front can make the difference between overriding an existing function and loading a new one. have a look at data/menu/projects/ingame.xml to see what path is used.
Note3: a few GUI textures are only getting added via lua later on, namely worker icons, motivation icons and the payday clock. these can be changed by Replace as well.

Animation:
path: data/graphics/animations/aname.anm
example: as originals (note: currently no effective tool known to edit animations)

AnimSet:
path: data/config/animsets/setname.xml (list of ids in data/config/animsets.xml, dynamically changed)
example: as originals

Upgrade Categories:
path: none (usually data/config/logic.xml, dynamically changed)
usage: add the Upgrade field to all EntityTypes that are supposed to be in the upgradecategory (you need at least Type for everything but the last).
		do not add the Category field, this will be set by the AddCategory function.
		last, call AddSettlerUpgradeCategory or AddBuildingUpgradeCategory with the upgradecategory name and the first entitytype.
		Note: Add the entitytypes in reverse order, so the id gets loaded properly.
Note: not all entity behaviors support upgrading. (as an example: darios hawk does not get removed and causes an infinite loop on destroying it.)

TerrainType:
path: data/config/terraintypes/tname.xml (usually data/config/terrain.xml, dynamically changed)
example:
<?xml version="1.0" encoding="utf-8" standalone="no" ?>
<root>
	<Logic>
		<Blocked>True</Blocked>
	</Logic>
	<Display>
		<Priority>500</Priority>
		<BaseTexture>StrangeTerrain</BaseTexture>
		<TransitionsTexture>Transitions01</TransitionsTexture>
		<SnowTexture>StrangeTerrain</SnowTexture>
		<Quads>4</Quads>
		<Color>
			<R>255</R>
			<G>0</G>
			<B>255</B>
		</Color>														
	</Display>
</root>
Note: remember to load BaseTexture, TransitionsTexture and SnowTexture as Terrain Textures, if you are not using a vanilla texture.

WaterTypes:
path: data/config/watertypes/wname.xml (usually data/config/water.xml, dynamically changed)
example:
<?xml version="1.0" encoding="utf-8" ?>
<root>
	<Logic>
		<Freezes>false</Freezes>
	</Logic>
	<Display>
		<Color>
			<Red>255</Red>
			<Green>0</Green>
			<Blue>0</Blue>
		</Color>
		<TransparencyFactor>0.005</TransparencyFactor>
		<TransparencyOffset>0.3</TransparencyOffset>
		<TransparencyMin>0.0</TransparencyMin>
		<TransparencyMax>1</TransparencyMax>
		<DrawShoreWave>false</DrawShoreWave>
		<Freezes>false</Freezes>
		<IceBaseTexture>Water/Ice01Base</IceBaseTexture>
		<IceDetailTexture>Water/Ice01Detail</IceDetailTexture>
	</Display>
</root>
Note: remember to load IceBaseTexture and IceDetailTexture as Terrain Textures, if you are not using a vanilla texture.

ExperienceClases:
path: data/config/experiencexpclassname.xml (note that the file to name Hero is named ExperienceHero.xml and not Hero.xml)
example: as originals (Note: you do not need to provide the Table field, this gets set by AddExperienceClass)
Note: the ExperienceClass of a entity depends on its EntityCategories. the first EntityCategory that has a ExperienceClass assocciated with it gets choosen, if multiple apply.
Note2: with CppLogic.EntityType.AddEntityCategory you can add random ints as EntityCategory (which AddExperienceClass accepts as well), to not need to use a predefined EntityCategory. just remember to clean it up.

Sound:
path data/sounds/soundname.wav (note that sounds get only loaded when played, so you have to keep the archive loaded)
example: as originals
Note: sounds get categorized into groups by comparing the name before `_rnd_`. when you try to play one sound, one of its group gets randomly played.
		the AddSounds function does not compare file names, instead all sounds added in one call form a group (which can be of size 1, to always play that one sound).
Note2: there is no replace for sounds, as they are loaded every time they get used. just replace the file and the modifed sound will get used.
Note3: if you use folders to organize sounds, use \\ as path separator in AddSounds. this will get chaged to _ in the Sounds table.
