Everything in here should work without CppLogic, this is just documentation of game mechanics. if CppLogic changes something, this is clearly marked.


Workers:
	Motivation:
		- Motivation is always a float, where 1.0 is shown as 100% in the GUI (and 0.0 as 0% respectively)
		- Each Player has a CurrentMaxMotivation which is capped by logic.xml->MotivationAbsoluteMaxMotivation
		- A Player can manipulate its Player->CurrentMaxMotivation with buildings that have a GGL::CAffectMotivationBehavior
		- Each Worker has his own Motivation
		- This Worker->Motivation can be decreased by Taxes and Overtimes
		- It can be increased by GGL::CAffectMotivationBehavior Buildings, as well as Taxes and Blessings
		- Worker->Motivation regularly gets reset to Player->CurrentMaxMotivation, if it is higher
		- Workers will leave, if their Motivation falls too low
		- A Players average Motivation will get calculated as a average of all Workers
		- If average Motivation is too low, no Settlers can join (Workers, Serfs, Leaders, Soldiers)
		- newly joined Workers start out at their Players average Motivation
	Worktime:
		- Each Worker has his own Worktime
		- Each Worker follows the basic pattern of Work->Eat->Rest->Work (if he has no Farm/Residence, Eat/Rest will be replaced by Camp, up to 2 times Camp if he has neither)
		- MaximumWorktime gets calculated from (logic.xml->WorkTimeBase + Worker->Props->WorkTimeMaxCangeFarm (if he has a Farm) + Worker->Props->WorkTimeMaxChangeResidence (if he has a Residence)) * Worker->Motivation
		- Worker->WorkTimeRemaining gets decreased by Working (by Worker->Props->WorkTimeChangeWork), if it reaches a threshold, the Worker leaves Work to Eat and Rest
		- Overtimes disable leaving for Eat+Rest, at the cost of Motivation (you loose Worker->Props->ExhaustedWorkMotivationMalus each time the Worker looses Worktime and it would be 0, this may cause the Worker to leave)
		- Eating, Resting and Camping replenishes Worktime by Factor * (MaxWorktime - logic.xml->WorkTimeThresholdWork), where Factor is Worker->Props->(WorkTimeChangeFarm, WorkTimeChangeResidence, WorkTimeChangeCamp)
		- there is a minimum of 0, but no real maximum (if you manage to trap a Refiner without access to a Supplier, they skip Work and quickly increase their Worktime)
		- the GGL::CMotivateWorkersAbility (Yuki) increases the Worktime of each nearby Worker by a flat amount (and not the Motivation as the name might suggest)
		- newly joined Workers start out at Work with their Maximum Worktime (calculated before any Farm/Residence get attached, you can see the Worktime bar decrease on joining, this is actually just the Maximum increasing, no change in the actual Worktime)
		- best efficency:
			- Motivation affects MaximumWorktime, which affects Worktime replenishment (loss by Work is not affected by Motivation)
			- having a Farm/Residence not only replenishes more of the MaximumWorktime (compared to Camp), it also increases the MaximumWorktime (Farm replenishes more, while Residence adds more Maximum, for a typical Worker, this can be changed on a per EntityType basis)
			- each cycle replenishes 20/100(no Farm/Residence), 160/225 (just Farm), 300/525 (just Residence), 720/625 (Farm and Residence) (at 1 Motivation)
			- maximizing Worktime per cycle is especially important for any Refiners, as they only use Raw Resources at the start of their Work and then produce Resources until their Worktime runs out
	Attachments:
		- each Tick:
			- moves all Workers that lost their Workplace from EmployedWorkers to FreeWorkers
		- each Update (automatic updates happen every playerattraction.xml->ReAttachWorkerFrequency (10) Seconds, manual via Logic.PlayerReAttachAllWorker)
			- detach all Farms and Residences
			- go through all Workplaces and try to attach one missing free Worker (20 times)
			- attach the nearest Farm to each employed Worker (max distance playerattraction.xml->MaximumDistanceWorkerToFarm)
			- attach the nearest Residence to each employed Worker (max distance playerattraction.xml->MaximumDistanceWorkerToFarm)
			- attach the nearest Farm to each unemployed Worker (max distance playerattraction.xml->MaximumDistanceWorkerToFarm)
			- attach the nearest Residence to each unemployed Worker (max distance playerattraction.xml->MaximumDistanceWorkerToFarm)
			- the order of attachments goes from first employed to last employed (or free)
			- distance to Farm/Residence is measured from Workplace position (if existing)
		- each Tick:
			- go through all Workplaces and try to attach one missing free Worker
			- for each employed worker, attach a Farm/Residence if he has none (same as on Update)
			- for each unemployed worker, attach a Farm/Residence if he has none (same as on Update)
		- each SpawnUpdate (playerattraction.xml->AttractionFrequency (2) Seconds):
			- for human Players: check Motivation, more than 1 VillageCenter, free VC space
			- for ai Players: check Motivation, more than one VillageCenter or Headquarters
			- get all Workplaces that are missing a Worker and who have a WorkerType that is not banned due to a Worker of that Type recently leaving
			- take the Workplace with the least percentage of Workers
			- search for the nearest reachable VillageCenter (if none found, search for the nearest reachable HQ instead)
			- spawn a Worker at that VC/HQ and attach it to the selected Workplace
		- summary + one trick:
			- employed Workers always steal Farm/Residence from unemployed Workers
			- Farm/Residence priority is determined by employment time
			- you can bump Workers down in Farm/Residence priority by unemploying and reemploying them


Combat:
	Base Values:
		- Settler->Damage gets calculated based off their Props->DamageAmount modified by Technologies, ExperienceLevels
		- Workers usually do not have any GGL::CBattleBehavior, so they have no Damage
		- Towers have no own Damage, but they (may) have a Turret Entity attached (this includes (Dark) Ballista/Cannontowers, Evil_Towers and hero placed Cannons and Traps)
		- Turret->Damage is just Props->DamageAmount
		- Settler->Armor gets calculated based of their Props->ArmorAmount modified by Technologies
		- Building->Armor gets calculated based of their Props->ArmorAmount modified by Technologies
		- Settler->RandomDamage calculates its maximum off Props->MaxDamageRandomBonus modified by Technologies and ExperienceLevels, then randomly rolled between [0,max)
		- Settler->MissChance gets calculated based off their Props->MissChance modified by ExperienceLevels
		- Settler->DodgeChance gets calculated based off their Props->MissChance modified by Technologies and ExperienceLevels
		- Bug: Experience level 1 does not give any boni, MissChance cannot be reduced by any ExperienceLevel (fixed by CppLogic.Logic.EnableExperienceClassFix)
		- Bug: Soldiers do not have a Armorclass and a Armor value of 0 (can be fixed with CppLogic.EntityType.SetArmor)
		- UI shows Damage = Settler->Damage * RangedEffectsFactor and Armor = Entity->Armor * (Settler ? RangedEffectsFactor : 1.0)
		- Bug: Towers with Turrets do not show any Damage (can be fixed in Lua by querying the Turret and then its Damage)
	GGL::CRangedEffectAbility:
		- may affect Armor and/or Damage of nearby Settlers (own/allied or hostile)
		- area calculation gets refreshed every Second
		- each RangedEffect applies a multiplier to the base value
		- multiple RangedEffects stack as follows: newFactor = Props->Factor - 1.0 + oldFactor (where Props->Factor is the DamageFactor or ArmorFactor of the current RangedEffect) (even the first RangedEffect gets added this way to 1.0)
	Leaders + Soldiers:
		- each Leader has a hidden pool of HP for its soldiers
		- if the Leader or one Soldier takes damage it first goes to that shared pool
		- remaining damage goes to the Leader
		- Bug? shared pool does not regenerate or gets healed by GGL::CRangedEffectAbility (fixed by CppLogic.Logic.SetLeadersRegenerateTroopHealth and CppLogic.Entity.Settler.EnableRangedEffectSoldierHeal)
	Damage/Armorclass:
		- these are the main way Unit counters work
		- they usually apply multiplicative to the Damage before Armor gets subtraced
		- each Damageclass has a factor defined for each Armorclass (because of this, Damageclasses can be added by modifying game files, but Armorclasses cannot)
		- Bug: due to a typo in the damageclasses.xml all factors against ArmorClassFur are 0.0 (may be fixed by CppLogic.Logic.SetDamageFactor)
	AoE Damage:
		- input Player, Damage, AoERange, Position, DamageClass
		- calculates RangeFactor against every Target by 1 - (Distance(Affected->Position, Position) / AoERange)^2
		- calculates Damage agaist every Target as Damage * RangeFactor * (DamageClass ? Damageclass[Target->Props->Armorclass] : 1.0) - Target->Armor * Target->RangedEffectsFactor
		- deals Damage to every (Player ? hostile : any diplomacy) Entity in AoERange
	Settler Melee:
		- Damage gets calculated as (AttackerSettler->Damage + AttackerSettler->RandomDamage) * AttackerSettler->Props->Damageclass[Target->Props->Armorclass] * Attacker->RangedEffectsFactor - Target->Armor * Target->RangedEffectsFactor
		- if Target->DodgeChance fails its random check, nothing more happens
		- otherwise Targe takes the calculated amount of damage immediately
	Settler Arrow:
		- Damage gets calculated as (AttackerSettler->Damage + AttackerSettler->RandomDamage) * AttackerSettler->Props->Damageclass[Target->Props->Armorclass] * Attacker->RangedEffectsFactor - Target->Armor * Target->RangedEffectsFactor
		- if Attacker->MissChance fails its random check, the Arrow will still get fired, it just does no damage
		- otherwise the Arrow will get fired, and the Target will take the calculated amount of damage as soon as the Arrow lands (if the Target moves, does not matter)
		- if a Arrow gets fired at a Soldier and the Soldier dies during the Arrows travel, no damage is dealt
		- Damage gets calculated at the time of firing the Arrow, any changes during flight are not taken into account
		- note that lvl1 Rifles use Arrows
	Settler Canonball:
		- calculates Cannonball->Damage as Attacker->Props->DamageAmount
		- Bug: does not include normal RandomDamage, Technologies, ExperienceLevels and GGL::CRangedEffectAbility (fixed by CppLogic.Combat.EnableAoEProjectileFix, to (Attacker->Damage + Attacker->RandomDamage) * Attacker->RangedEffectsFactor)
		- then fires the Cannonball at the Target->Position
		- as soon as the Cannonball hits, deals AoE Damage at the impact position
		- you can outrun the AoE range if the flight time is long enough
		- Bug: if the Attacker gets Destroyed during Cannonball flight, damages all Entities close to impact Position (fixed by CppLogic.Combat.EnableAoEProjectileFix)
		- Bug: does not include Damageclass/Armorclass (fixed by CppLogic.Combat.EnableAoEProjectileFix)
		- note that lvl2 Rifles use Cannonballs with extremely small AoE
	Turret Cannonball:
		- calculates Cannonball->Damage as Attacker->Props->DamageAmount
		- then continue as in Settler Canonball, with the same 2 Bugs
	Turret Trap:
		- deals Attacker->Props->DamageAmount AoEDamage on its position
	Turret Arrow:
		- fires a Arrow that never misses and always deals Attacker->Props->DamageAmount damage with no Armor or Damage/Armorclass taken into account
		- Bug: no Damage calculation (fixed by CppLogic.Combat.EnableAoEProjectileFix, to Attacker->Props->DamageAmount * AttackerSettler->Props->Damageclass[Target->Props->Armorclass] - Target->Armor * Target->RangedEffectsFactor)
	GGL::CBombBehavior (GGL::CBombPlacerBehavior):
		- deals Props->Damage AoEDamage on its position (no Damageclass)
		- Bug: no Statistics for kills (fixed by CppLogic.Combat.EnableAoEProjectileFix)
	GGL::CCircularAttack:
		- calculate Damage as Attacker->CCircularAttackProps->Damage modified by Technologies, ExperienceLevels and RangedEffectsFactor
		- deals AoEDamage on its position
	GGL::CSniperAbility:
		- calculate Damage as Target->MaxHealth * Attacker->HPFactor
		- Bug: Damage is dealt immediately, not with a Arrow (fixed by CppLogic.Logic.FixSnipeDamage)