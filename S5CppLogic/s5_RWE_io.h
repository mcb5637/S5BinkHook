#pragma once
#include "s5_RWEngine.h"

namespace RWE::IO {
	struct PNGImage {
		static inline RwImage* (__cdecl* const Read)(const char* imageName) = reinterpret_cast<RwImage * (__cdecl*)(const char*)>(0x6F25B0);

		/* 0x6F5680 png_create_read_struct_2
		// 0x6FE090 png_create_struct_2
		// 0x6FE2B0 png_free
		// 0x6FE240 png_destroy_struct
		// 0x6FE210 png_set_mem_fn
		// 0x6F2A70 png_set_error_fn
		// 0x6F2A90 png_error
		// 0x6F2AB0 png_warning
		// 0x6FE260 png_malloc
		// 0x6F50F0 png_zalloc
		// 0x6F5150 png_zfree
		// 0x6FF910 inflateInit_
		// 0x6FF810 inflateInit2_
		// 0x704C90 zcalloc
		// 0x704CB0 zcfree
		// 0x705950 inflate_blocks_free
		// 0x704D40 inflate_blocks_new
		// 0x6F5640 png_create_info_struct
		// 0x6FA870 png_set_read_fn
		// 0x6F6560 png_destroy_read_struct
		// 0x6F62F0 png_read_destroy
		// 0x6F5590 png_info_destroy
		// 0x6F51D0 png_free_data
		// 0x6FE120 png_destroy_struct_2
		// 0x6F5850 png_read_info
		// 0x6F6640 png_get_IHDR
		// 0x6F67E0 png_set_strip_16
		// 0x6F67F0 png_set_gray_1_2_4_to_8
		// 0x6F3AD0 png_set_filler
		// 0x6F3A90 png_set_packing
		// 0x6F6800 png_set_gray_to_rgb
		// 0x6F6620 png_get_valid
		// 0x6F6760 png_get_tRNS
		// 0x6F6020 png_read_image
		// 0x6F5BC0 png_read_row
		// 0x700A60 png_read_start_row
		// 0x6F9980 png_init_read_transformations
		// 0x6F91C0 png_build_gamma_table, global png_gamma_shift 0x84B4B0
		// 0x6FE1D0 png_memset_check
		// 0x702E90 png_read_finish_row
		// 0x700880 png_read_filter_row
		// 0x700460 png_do_read_interlace, global png_pass_dsp_mask 7AC1BC, png_pass_mask
		// 0x6F6070 png_read_end
		// 0x700CC0 png_crc_finish
		// 0x6FA850 png_read_data
		// 0x6F2B00 png_chunk_error
		// 0x6F2B30 png_chunk_warning
		// 0x6F29E0 png_format_buffer
		// 0x6FFD30 png_get_uint_32
		// 0x6F5160 png_reset_crc
		// 0x6FFD60 png_crc_read
		// 0x6F5180 png_calculate_crc
		// 0x700D90 png_handle_IHDR
		// 0x6F43E0 png_set_IHDR
		// 0x7010A0 png_handle_IEND
		// 0x6F55F0 png_handle_as_unknown
		// 0x702D40 png_handle_unknown
		// 0x700F00 png_handle_PLTE
		// 0x6F47D0 png_set_PLTE
		// 0x702070 png_handle_bKGD
		// 0x6F3EE0 png_set_bKGD
		// 0x7013D0 png_handle_cHRM
		// 0x6F3F10 png_set_cHRM
		// 0x6F4170 png_set_cHRM_fixed
		// 0x7010F0 png_handle_gAMA
		// 0x6F4270 png_set_gAMA
		// 0x6F42F0 png_set_gAMA_fixed
		// 0x702290 png_handle_hIST
		// 0x6F4340 png_set_hIST
		// 0x702520 png_handle_oFFs
		// 0x6F45B0 png_set_oFFs
		// 0x702640 png_handle_pCAL
		// 0x6F45F0 png_set_pCAL
		// 0x7028C0 png_handle_sCAL
		// 0x6F4750 png_set_sCAL
		// 0x702400 png_handle_pHYs
		// 0x6F4790 png_set_pHYs
		// 0x701260 png_handle_sBIT
		// 0x6F4860 png_set_sBIT
		// 0x701870 png_handle_sRGB
		// 0x6F4890 png_set_sRGB_gAMA_and_cHRM
		// 0x701A70 png_handle_iCCP
		// 0x6F4970 png_set_iCCP
		// 0x6FFE10 png_decompress_chunk
		// 0x6FF930 inflate
		// 0x704DE0 inflate_blocks
		// 0x7068B0 inflate_flush
		// 0x706880 inflate_trees_fixed
		// 0x706640 inflate_trees_bits, inflate_mask 84C660
		// 0x7066F0 inflate_trees_dynamic
		// 0x7059E0 inflate_codes_new
		// 0x705A20 inflate_codes
		// 0x706130 inflate_codes_free
		// 0x7069E0 inflate_fast
		// 0x704CC0 inflate_blocks_reset
		// 0x706150 huft_build
		// 0x701C20 png_handle_sPLT
		// 0x6F4D40 png_set_sPLT
		// 0x702B60 png_handle_tEXt
		// 0x6F4A60 png_set_text
		// 0x702A60 png_handle_tIME
		// 0x6F4C50 png_set_tIME
		// 0x701E30 png_handle_tRNS
		// 0x6F4C90 png_set_tRNS
		// 0x702C30 png_handle_zTXt*/
	};
}
